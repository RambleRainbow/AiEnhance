# AiEnhance 开发模式 - 外部依赖服务
# 适合开发、调试、测试阶段使用
# 主应用在本地运行: uv run python main.py

version: '3.8'

services:
  # PostgreSQL数据库 - MIRIX记忆存储后端
  postgres:
    image: pgvector/pgvector:pg16
    container_name: aienhance-postgres
    environment:
      POSTGRES_DB: mirix_memory
      POSTGRES_USER: mirix
      POSTGRES_PASSWORD: mirix_password
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres-init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U mirix -d mirix_memory"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Redis - 缓存和会话存储
  redis:
    image: redis:7-alpine
    container_name: aienhance-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # MIRIX后端服务
  mirix-backend:
    build:
      context: .
      dockerfile: docker/mirix/Dockerfile
    container_name: aienhance-mirix
    ports:
      - "8000:8000"
    environment:
      # 数据库配置
      - DATABASE_URL=postgresql://mirix:mirix_password@postgres:5432/mirix_memory
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=mirix_memory
      - POSTGRES_USER=mirix
      - POSTGRES_PASSWORD=mirix_password
      
      # Redis配置
      - REDIS_URL=redis://redis:6379/0
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      
      # LLM配置 - 指向本地Ollama服务
      - OLLAMA_BASE_URL=http://host.docker.internal:11434
      - DEFAULT_LLM_PROVIDER=ollama
      - DEFAULT_LLM_MODEL=qwen3:8b
      - DEFAULT_EMBEDDING_PROVIDER=ollama
      - DEFAULT_EMBEDDING_MODEL=bge-m3
      
      # API配置
      - API_HOST=0.0.0.0
      - API_PORT=8000
      - LOG_LEVEL=info
      
      # MIRIX特定配置
      - MIRIX_DATA_DIR=/data/mirix
      - MIRIX_CONFIG_PATH=/app/config/mirix.yml
      - ENABLE_SCREEN_CAPTURE=false
      - ENABLE_AUDIO_CAPTURE=false
    volumes:
      - mirix_data:/data/mirix
      - ./config:/app/config
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  mirix_data:
    driver: local

networks:
  default:
    name: aienhance-network
    driver: bridge

# ========================
# 开发模式使用说明
# ========================
#
# 1. 启动外部依赖服务:
#    docker compose up -d
#
# 2. 确保本地Ollama运行:
#    ollama serve
#    ollama pull qwen3:8b
#    ollama pull bge-m3
#
# 3. 本地运行主应用:
#    uv run python main.py
#
# 4. 测试协作功能:
#    uv run python test_collaboration_layer.py
#
# ========================
# 生产部署
# ========================
#
# 使用完整应用栈:
#    docker compose -f docker-compose.full.yml up -d
#
# ========================
# 管理界面 (可选)
# ========================
#
# 启动数据库管理界面:
#    docker run -d --name pgadmin \
#      -e PGADMIN_DEFAULT_EMAIL=admin@local \
#      -e PGADMIN_DEFAULT_PASSWORD=admin \
#      -p 5050:80 \
#      --network aienhance-network \
#      dpage/pgadmin4